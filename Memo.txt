メインファイルはProgram.cs
dotnet runするとProgram.csが動くというわけ。

--API(HTTPリクエスト)側の処理はControllersフォルダで管理。
Controllersフォルダは何を管理しているの？
Controllersフォルダは、ASP.NET Core Web APIアプリケーションにおいて、HTTPリクエストを受け取り、適切な応答を返すためのコントローラークラスを管理するためのフォルダです。コントローラーはアプリケーションの主要なコンポーネントであり、HTTPリクエストに対する処理を定義します。具体的には以下の役割を果たします：
HTTPリクエストの受け取り: コントローラーは特定のエンドポイントに対するHTTPリクエストを受け取ります。例えば、GET、POST、PUT、DELETEなどのHTTPメソッドに対応するエンドポイントを処理します。
リクエストの処理: 受け取ったHTTPリクエストのデータ（パラメータ、ボディ、ヘッダーなど）を解析し、必要なビジネスロジックを呼び出します。これにより、クライアントからのリクエストに対する適切な処理が行われます。
レスポンスの生成: コントローラーは処理結果に基づいてHTTPレスポンスを生成し、クライアントに返します。このレスポンスには、データ（JSON、XMLなど）やステータスコード（成功、エラーなど）が含まれることがあります。
ルーティング: コントローラーは、ルーティングと結びついて特定のエンドポイントに割り当てられます。ASP.NET Coreでは、ルーティングがHTTPリクエストを対応するコントローラーとアクションメソッドにルーティングするのに役立ちます。
Controllersフォルダ内には、さまざまなコントローラークラスが含まれることがあり、各コントローラーは異なるエンドポイントやリソースに対する操作を処理します。例えば、UserControllerはユーザーに関連する操作を処理し、ProductControllerは製品に関連する操作を処理するなど、アプリケーション内の異なるリソースや機能に対応するためにコントローラーを複数用意できます。
簡単な例として、以下はUserControllerのコードの一部を示すことで、コントローラーがHTTPリクエストを処理する方法を示しています：

Controllersフォルダ内に同一Routeがあるファイルが場合、どういう処理になるの？
ASP.NET Coreでは、同じルートを持つ複数のコントローラーファイルが存在する場合、ルートがどのコントローラーアクションにマップされるかを制御するためのルートの優先順位規則があります。この規則に従って、ASP.NET Coreはリクエストを正確なコントローラーアクションにルーティングします。
ルートの優先順位規則は次のようになります：
ルートの一致度: ルートの指定が最も一致するコントローラーアクションが選択されます。つまり、リクエストのURLがルートと最も一致するコントローラーアクションが優先されます。
ルートの指定順序: コントローラークラス内でアクションメソッドが宣言された順序に関係なく、最初にマッチするルートが優先されます。
デフォルトルート: ルートが一致しない場合、デフォルトルートが使用されることがあります。通常、ルートの指定がないアクションメソッドは、デフォルトルートにマッチします。